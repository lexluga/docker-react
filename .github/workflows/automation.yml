name: CI to Docker Hub

on:
  push:
    branches: [ main ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ main ]
  

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 14.x, 16.x, 17.x ]

    steps:
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

   
    - name: Check Out Repo 
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test -- --coverage 


    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

    - name: Publish to Docker Hub
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: lexluga/react-app:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache 
        
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

    # .github/workflows/main.yml continued

    - name: Get Timestamp
      uses: gerred/actions/current-time@master
      id: current-time

    - name: Run String Replace
      uses: frabert/replace-string-action@master
      id: format-time
      with:
        pattern: '[:\.]+'
        string: "${{ steps.current-time.outputs.time }}"
        replace-with: '-'
        flags: 'g'

    - name: Generate Deployment Package
      run: zip -r deploy.zip * -x "**node_modules**"

    - name: Deploy to EB
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: docker-react
        environment_name: Dockerreact-env
        version_label: "docker-app-${{ steps.format-time.outputs.replaced }}"
        region: us-east-2
        deployment_package: deploy.zip
     

